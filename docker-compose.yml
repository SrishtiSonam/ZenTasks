# version: "3.9"
# version of docker compose syntax 


# Under this we have our different services required for application. 
services: 
  # Run on our docker file.
  app:   
    # build the docker file inside our current directory 
    # Context of app service is the root directory that we are running. 
    build:
      context: .
      # Building argument - Overriding Dockerfile content.
      args:
        - DEV=true
    # Maps port 8000 to our local machine to port 8000 inside our docker container.
    # Access the network when we want to connect to our server.
    ports: 
      - "8000:8000"
    # Volumes - odd way of mapping directories from our system into the docker container.
    # Updates in local machine gets reflects in running conatiner and vise-versa.
    volumes: 
      - ./app:/app
    # Command to run the service - default command. 
    # We can override this command when we run docker compose. 
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      # Dev credentials for local machine as they are hardcoded.
      - DB_HOST = db
      - DB_NAME = devdb
      - DB_USER = devuser
      - DB_PASS = changeme 
    depends_on:
      - db
  
  # Name of the service.
  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      # Setting env variables 
      # Setting initial database configuration for the new db services.
      # Dev credentials for local machine.
      - POSTGRES_DB = devdb
      - POSTGRES_USER = devuser 
      - POSTGRES_PASSWORD = changeme 

volumes:
  # Will automatically picks default location
  dev-db-data:





#  docker-compose build     -     (2)
# Build Our Docker Image 
# Build and tag images properly.